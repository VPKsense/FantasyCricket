# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Game.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PW import Ui_PerformanceWindow
import sqlite3
gamedb=sqlite3.connect('GameData.db')
gamecur=gamedb.cursor()


class Ui_MainWindow(object):
    teamname=""
    cat=""
    bat=0
    bow=0
    ar=0
    wk=0
    pointsavail=1000
    pointsused=0
    catlist={}
    Flag=0
    
    def openPerformance(self):
         self.windowp = QtWidgets.QMainWindow()
         self.uip = Ui_PerformanceWindow()
         self.uip.setupUi(self.windowp)
         self.windowp.show()

    def OpenTeam(self):
        self.TeamF.setText("")
        self.PlayerList.clear()
        self.SelectedList.clear()
        gamecur.execute("SELECT DISTINCT TeamName FROM teams")
        self.PlayerList.setEnabled(False)
        self.Flag=1
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        self.pointsavail=1000
        self.pointsused=0
        self.WK.setEnabled(False)
        self.BOW.setEnabled(False)
        self.AR.setEnabled(False)
        self.BAT.setEnabled(False)
        self.BatsmenF.setText(str(self.bat))
        self.BowlersF.setText(str(self.bow))
        self.AllRounderF.setText(str(self.ar))
        self.WicketF.setText(str(self.wk))
        self.PointsAF.setText(str(self.pointsavail))
        self.PointsUF.setText(str(self.pointsused))
        self.PlayerList.addItem('Select the Team you would like to Open')
        teams=gamecur.fetchall()
        for i in teams:
            self.SelectedList.addItem(i[0])
        

    def NewTeamSet(self):
        
        self.TeamF.setText("")
        self.Flag=0
        self.PlayerList.clear()
        self.SelectedList.clear()
        gamecur.execute("SELECT Player from stats;")
        self.TeamF.setReadOnly(False)
        self.bat=0
        self.bow=0
        self.ar=0
        self.wk=0
        self.pointsavail=1000
        self.pointsused=0
        self.BatsmenF.setText(str(self.bat))
        self.BowlersF.setText(str(self.bow))
        self.AllRounderF.setText(str(self.ar))
        self.WicketF.setText(str(self.wk))
        self.PointsAF.setText(str(self.pointsavail))
        self.PointsUF.setText(str(self.pointsused))
        self.Statusbar.setText("Enter a Team name and Press Enter")
        result=gamecur.fetchall()
        for each in result:
           self.PlayerList.addItem(each[0])


    def SaveTeam(self):
        self.SelectedList.setEnabled(False)
        self.PlayerList.setEnabled(False)
        self.actionSave_Team.setEnabled(False)
        for i in range(self.SelectedList.count()):
            play=self.SelectedList.item(i).text()
            cate=self.catlist.pop(play)
            gamecur.execute("INSERT INTO teams (TeamName,Players,Category) VALUES (?,?,?);",(self.teamname,play,cate))
        gamedb.commit()
        self.Statusbar.setText("Your Team has been Saved! Its time to Evaluate your Fantasy Team's Performance")
   
    def CatSelect(self):
            self.Statusbar.setText("")
            if self.BAT.isChecked()==True:
                self.cat='BAT'
            elif self.BOW.isChecked()==True:
                self.cat='BOW'
            elif self.AR.isChecked()==True:
                self.cat='AR'
            elif self.WK.isChecked()==True:
                self.cat='WK'

    def Getteam(self):
        self.teamname=self.TeamF.text()
        if self.teamname=="":
            self.Statusbar.setText("Please Enter a Team name")
        else:    
            self.Statusbar.setText("Select your players under the Category you need them to be in")
            self.WK.setEnabled(True)
            self.BOW.setEnabled(True)
            self.AR.setEnabled(True)
            self.BAT.setEnabled(True)
            self.PlayerList.setEnabled(True)
            self.TeamF.setReadOnly(True)

    def Condcheck(self):
        if self.bat<3:
            self.Statusbar.setText("Please select atleast 3 Batsmen")
        elif self.bow<3:
            self.Statusbar.setText("Please select atleast 3 Bowlers")
        elif self.ar<3:
            self.Statusbar.setText("Please select atleast 3 All Rounders")
        elif self.wk<1:
            self.Statusbar.setText("Please select a Wicket Keeper")
        else:
            self.actionSave_Team.setEnabled(True)
            self.Statusbar.setText("Your Team is all set! Now Save it to Evaluate the score")

    def PointCheck(self,player,loca):
        gamecur.execute("SELECT Value from stats WHERE Player='"+player+"';")
        value=gamecur.fetchone()
        value=int(value[0])
        if loca==1:
            self.pointsavail-=value
            self.pointsused+=value
            if self.pointsavail<0:
                self.Statusbar.setText("Max points used! Please change the player")
                self.actionSave_Team.setEnabled(False)
            else:
                self.Statusbar.setText("")
                self.PointsAF.setText(str(self.pointsavail))
                self.PointsUF.setText(str(self.pointsused))
        if loca==2:
            self.pointsavail+=value
            self.pointsused-=value
            self.PointsAF.setText(str(self.pointsavail))
            self.PointsUF.setText(str(self.pointsused))
        
    def menufunction(self, action):

        self.Statusbar.setText("")
        self.SelectedList.setEnabled(True)
        self.TeamF.setEnabled(True)
        self.PointsUF.setEnabled(True)
        self.BatsmenF.setEnabled(True)
        self.BowlersF.setEnabled(True)
        self.AllRounderF.setEnabled(True)
        self.WicketF.setEnabled(True)
        self.PointsAF.setEnabled(True)

        txt= (action.text())
        if txt=='Evaluate Team':
            self.openPerformance()
        elif txt=='New Team':
            self.NewTeamSet()
        elif txt=='Save Team':
            self.SaveTeam()
        elif txt=='Open Team':
            self.OpenTeam()
            

    def addplayer(self, item):
        if (self.BAT.isChecked()==False) and (self.WK.isChecked()==False) and (self.AR.isChecked()==False) and (self.BOW.isChecked()==False):
           self.Statusbar.setText("Please select a Category for the selected Player") 
        elif self.SelectedList.count()>10:
            self.Statusbar.setText("Max no. of players already selected")
        elif self.cat=='WK':
                self.wk=self.wk+1
                if(self.wk>1):
                    self.wk=self.wk-1
                    self.Statusbar.setText("Wicket Keeper can't be more than 1")
                else:
                    self.PlayerList.takeItem(self.PlayerList.row(item))
                    self.SelectedList.addItem(item.text())
                    self.WicketF.setText(str(self.wk))
                    self.PointCheck(item.text(),1)
                    self.catlist[item.text()]=self.cat
        else:
            if self.cat=='BAT':
                self.bat=self.bat+1
                self.BatsmenF.setText(str(self.bat))
            elif self.cat=='BOW':
                self.bow=self.bow+1
                self.BowlersF.setText(str(self.bow))
            elif self.cat=='AR':
                self.ar=self.ar+1
                self.AllRounderF.setText(str(self.ar))
            self.PlayerList.takeItem(self.PlayerList.row(item))
            self.SelectedList.addItem(item.text())
            self.catlist[item.text()]=self.cat
            self.PointCheck(item.text(),1)
        if self.SelectedList.count()==11:
            self.Condcheck()
                
    def removeplayer(self, item):
        if self.Flag==0:
            self.SelectedList.takeItem(self.SelectedList.row(item))
            self.PlayerList.addItem(item.text())
            rem=self.catlist.pop(item.text())
            if rem=='BAT':
                    self.bat=self.bat-1
                    self.BatsmenF.setText(str(self.bat))
            elif rem=='BOW':
                self.bow=self.bow-1
                self.BowlersF.setText(str(self.bow))
            elif rem=='AR':
                self.ar=self.ar-1
                self.AllRounderF.setText(str(self.ar))
            else:
                self.wk=self.wk-1
                self.WicketF.setText(str(self.wk))
            self.PointCheck(item.text(),2)
        if self.Flag==1:
            self.SelectedList.setEnabled(False)
            team=item.text()
            self.PlayerList.clear()
            self.PlayerList.addItem('This is your Team Members>')
            gamecur.execute("SELECT Players from teams WHERE TeamName='"+team+"';")
            result=gamecur.fetchall()
            self.SelectedList.clear()
            self.TeamF.setText(team)
            for each in result:
              self.SelectedList.addItem(each[0])
              self.PointCheck(each[0],1)
            gamecur.execute("SELECT Category from teams WHERE TeamName='"+team+"';")
            result=gamecur.fetchall()
            for each in result:
              if each[0]=="BAT":
                  self.bat+=1
              elif each[0]=="BOW":
                  self.bow+=1
              elif each[0]=="AR":
                  self.ar+=1
              elif each[0]=="WK":
                  self.wk+=1
            self.BatsmenF.setText(str(self.bat))
            self.BowlersF.setText(str(self.bow))
            self.AllRounderF.setText(str(self.ar))
            self.WicketF.setText(str(self.wk))
            self.Statusbar.setText("Saved Teams are not editable!")
        

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(497, 539)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.Top = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.Top.setFont(font)
        self.Top.setObjectName("Top")
        self.gridLayout.addWidget(self.Top, 0, 0, 1, 1)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.PointsUL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PointsUL.setFont(font)
        self.PointsUL.setObjectName("PointsUL")
        self.gridLayout_2.addWidget(self.PointsUL, 0, 2, 1, 1)
        self.PointsAL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.PointsAL.setFont(font)
        self.PointsAL.setObjectName("PointsAL")
        self.gridLayout_2.addWidget(self.PointsAL, 0, 0, 1, 1)
        self.TeamL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.TeamL.setFont(font)
        self.TeamL.setObjectName("TeamL")
        self.gridLayout_2.addWidget(self.TeamL, 1, 2, 1, 1)
        self.PointsUF = QtWidgets.QLineEdit(self.centralwidget)
        self.PointsUF.setEnabled(True)
        self.PointsUF.setReadOnly(True)
        self.PointsUF.setObjectName("PointsUF")
        self.gridLayout_2.addWidget(self.PointsUF, 0, 3, 1, 1)
        self.TeamF = QtWidgets.QLineEdit(self.centralwidget)
        self.TeamF.setReadOnly(True)
        self.TeamF.setObjectName("TeamF")
        self.gridLayout_2.addWidget(self.TeamF, 1, 3, 1, 1)
        self.PointsAF = QtWidgets.QLineEdit(self.centralwidget)
        self.PointsAF.setEnabled(True)
        self.PointsAF.setReadOnly(True)
        self.PointsAF.setObjectName("PointsAF")
        self.gridLayout_2.addWidget(self.PointsAF, 0, 1, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.BAT = QtWidgets.QRadioButton(self.centralwidget)
        self.BAT.setObjectName("BAT")
        self.horizontalLayout.addWidget(self.BAT)
        self.BOW = QtWidgets.QRadioButton(self.centralwidget)
        self.BOW.setObjectName("BOW")
        self.horizontalLayout.addWidget(self.BOW)
        self.AR = QtWidgets.QRadioButton(self.centralwidget)
        self.AR.setObjectName("AR")
        self.horizontalLayout.addWidget(self.AR)
        self.WK = QtWidgets.QRadioButton(self.centralwidget)
        self.WK.setObjectName("WK")
        self.horizontalLayout.addWidget(self.WK)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        self.gridLayout.addLayout(self.gridLayout_2, 2, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.BatsmenL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.BatsmenL.setFont(font)
        self.BatsmenL.setObjectName("BatsmenL")
        self.horizontalLayout_3.addWidget(self.BatsmenL)
        self.BatsmenF = QtWidgets.QLineEdit(self.centralwidget)
        self.BatsmenF.setReadOnly(True)
        self.BatsmenF.setObjectName("BatsmenF")
        self.horizontalLayout_3.addWidget(self.BatsmenF)
        self.BowlersL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.BowlersL.setFont(font)
        self.BowlersL.setObjectName("BowlersL")
        self.horizontalLayout_3.addWidget(self.BowlersL)
        self.BowlersF = QtWidgets.QLineEdit(self.centralwidget)
        self.BowlersF.setEnabled(True)
        self.BowlersF.setMaximumSize(QtCore.QSize(54, 16777215))
        self.BowlersF.setReadOnly(True)
        self.BowlersF.setObjectName("BowlersF")
        self.horizontalLayout_3.addWidget(self.BowlersF)
        self.AllrounderL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.AllrounderL.setFont(font)
        self.AllrounderL.setObjectName("AllrounderL")
        self.horizontalLayout_3.addWidget(self.AllrounderL)
        self.AllRounderF = QtWidgets.QLineEdit(self.centralwidget)
        self.AllRounderF.setReadOnly(True)
        self.AllRounderF.setObjectName("AllRounderF")
        self.horizontalLayout_3.addWidget(self.AllRounderF)
        self.WicketL = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(True)
        font.setWeight(75)
        self.WicketL.setFont(font)
        self.WicketL.setObjectName("WicketL")
        self.horizontalLayout_3.addWidget(self.WicketL)
        self.WicketF = QtWidgets.QLineEdit(self.centralwidget)
        self.WicketF.setReadOnly(True)
        self.WicketF.setObjectName("WicketF")
        self.horizontalLayout_3.addWidget(self.WicketF)
        self.gridLayout.addLayout(self.horizontalLayout_3, 1, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.PlayerList = QtWidgets.QListWidget(self.centralwidget)
        self.PlayerList.setObjectName("PlayerList")
        self.horizontalLayout_2.addWidget(self.PlayerList)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.SelectedList = QtWidgets.QListWidget(self.centralwidget)
        self.SelectedList.setObjectName("SelectedList")
        self.horizontalLayout_2.addWidget(self.SelectedList)
        self.gridLayout.addLayout(self.horizontalLayout_2, 3, 0, 1, 1)
        self.Statusbar = QtWidgets.QLabel(self.centralwidget)
        self.Statusbar.setText("Start With a New Team or Select an existing team using Open Team from Menu")
        self.Statusbar.setObjectName("Statusbar")
        self.gridLayout.addWidget(self.Statusbar, 4, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 497, 21))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionOpen_Team = QtWidgets.QAction(MainWindow)
        self.actionOpen_Team.setObjectName("actionOpen_Team")
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionEvaluate_Team = QtWidgets.QAction(MainWindow)
        self.actionEvaluate_Team.setObjectName("actionEvaluate_Team")
        self.menuManage_Teams.addAction(self.actionNew_Team)
        self.menuManage_Teams.addAction(self.actionOpen_Team)
        self.menuManage_Teams.addAction(self.actionSave_Team)
        self.menuManage_Teams.addAction(self.actionEvaluate_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.PlayerList.setEnabled(False)
        self.SelectedList.setEnabled(False)
        self.WK.setEnabled(False)
        self.BOW.setEnabled(False)
        self.AR.setEnabled(False)
        self.BAT.setEnabled(False)
        self.TeamF.setEnabled(False)
        self.PointsUF.setEnabled(False)
        self.PointsAF.setEnabled(False)
        self.BatsmenF.setEnabled(False)
        self.BowlersF.setEnabled(False)
        self.AllRounderF.setEnabled(False)
        self.WicketF.setEnabled(False)
        self.actionSave_Team.setEnabled(False)
        self.actionEvaluate_Team.setEnabled(True)

        self.BAT.toggled.connect(self.CatSelect)
        self.BOW.toggled.connect(self.CatSelect)
        self.AR.toggled.connect(self.CatSelect)
        self.WK.toggled.connect(self.CatSelect)
        self.menubar.triggered[QtWidgets.QAction].connect(self.menufunction)
        self.TeamF.returnPressed.connect(self.Getteam)
        self.PlayerList.itemDoubleClicked.connect(self.addplayer)
        self.SelectedList.itemDoubleClicked.connect(self.removeplayer)
        
        

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket V1.0"))
        self.Top.setText(_translate("MainWindow", "Your selections:"))
        self.PointsUL.setText(_translate("MainWindow", "Points Used:"))
        self.PointsAL.setText(_translate("MainWindow", "Points Available:"))
        self.TeamL.setText(_translate("MainWindow", "Team Name:"))
        self.BAT.setText(_translate("MainWindow", "BAT"))
        self.BOW.setText(_translate("MainWindow", "BOW"))
        self.AR.setText(_translate("MainWindow", "AR"))
        self.WK.setText(_translate("MainWindow", "WK"))
        self.BatsmenL.setText(_translate("MainWindow", "Batsmen"))
        self.BowlersL.setText(_translate("MainWindow", "Bowlers"))
        self.AllrounderL.setText(_translate("MainWindow", "All Rounders"))
        self.WicketL.setText(_translate("MainWindow", "Wicket Keeper"))
        self.label.setText(_translate("MainWindow", ">"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))
        self.actionOpen_Team.setText(_translate("MainWindow", "Open Team"))
        self.actionSave_Team.setText(_translate("MainWindow", "Save Team"))
        self.actionEvaluate_Team.setText(_translate("MainWindow", "Evaluate Team"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
